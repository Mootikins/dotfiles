#compdef model-manager

# Zsh completion for model-manager
# Place this file in your fpath (e.g., ~/.local/share/zsh/site-functions/)

_model-manager() {
    local context state state_descr line
    typeset -A opt_args

    local -a commands
    commands=(
        'add:Download and configure model'
        'update:Update existing model (incremental)'
        'sync:Update existing model (alias for update)'
        'add-quant:Add specific quantizations to existing model'
        'add-quantization:Add specific quantizations (alias for add-quant)'
        'list:List downloaded models'
        'ls:List downloaded models (alias for list)'
        'remove:Remove model and files'
        'rm:Remove model and files (alias for remove)'
        'update-configs:Regenerate all configurations'
        'help:Show help message'
    )

    local -a quantizations
    quantizations=(
        'Q2_K:2-bit quantization'
        'Q3_K_S:3-bit quantization (small)'
        'Q3_K_M:3-bit quantization (medium)'
        'Q3_K_L:3-bit quantization (large)'
        'Q4_0:4-bit quantization (legacy)'
        'Q4_1:4-bit quantization (legacy)'
        'Q4_K_S:4-bit quantization (small)'
        'Q4_K_M:4-bit quantization (medium)'
        'Q5_0:5-bit quantization (legacy)'
        'Q5_1:5-bit quantization (legacy)'
        'Q5_K_S:5-bit quantization (small)'
        'Q5_K_M:5-bit quantization (medium)'
        'Q6_K:6-bit quantization'
        'Q8_0:8-bit quantization'
        'Q8_K:8-bit quantization (K-quant)'
        'Q8_K_S:8-bit quantization (K-quant small)'
        'Q8_K_M:8-bit quantization (K-quant medium)'
        'Q8_K_L:8-bit quantization (K-quant large)'
        'Q8_K_XL:8-bit quantization (K-quant extra large)'
        'F16:16-bit float'
        'F32:32-bit float'
        'MXFP4:Mixed precision 4-bit'
        'MXFP8:Mixed precision 8-bit'
    )

    _arguments -C \
        '1: :_model_manager_commands' \
        '*:: :->args' \
        && return 0

    case $state in
        args)
            case $words[1] in
                add)
                    case $CURRENT in
                        2)
                            _arguments \
                                '2: :_model_manager_model_ids' \
                                '*: :_model_manager_quantizations'
                            ;;
                        *)
                            _model_manager_quantizations
                            ;;
                    esac
                    ;;
                update|sync)
                    case $CURRENT in
                        2)
                            _arguments \
                                '2: :_model_manager_existing_models' \
                                '*: :_model_manager_quantizations'
                            ;;
                        *)
                            _model_manager_quantizations
                            ;;
                    esac
                    ;;
                add-quant|add-quantization)
                    case $CURRENT in
                        2)
                            _model_manager_existing_models
                            ;;
                        *)
                            _model_manager_quantizations
                            ;;
                    esac
                    ;;
                remove|rm)
                    _model_manager_existing_models
                    ;;
                help|list|ls|update-configs)
                    # These commands take no arguments
                    ;;
            esac
            ;;
    esac
}

_model_manager_commands() {
    _describe 'command' commands
}

_model_manager_quantizations() {
    _describe 'quantization' quantizations
}

_model_manager_existing_models() {
    local -a existing_models
    local models_dir="$HOME/models"
    
    if [[ -d "$models_dir" ]]; then
        # Find directories with .model-info.yaml files and extract model IDs
        existing_models=($(find "$models_dir" -name ".model-info.yaml" -exec grep -l "model_id:" {} \; 2>/dev/null | \
                          xargs grep "model_id:" 2>/dev/null | \
                          sed 's/.*model_id: *"\([^"]*\)".*/\1/' | \
                          sort -u))
        
        # If no model-info.yaml files found, fall back to directory structure
        if [[ ${#existing_models[@]} -eq 0 ]]; then
            existing_models=()
            for org_dir in "$models_dir"/*; do
                if [[ -d "$org_dir" && "$(basename "$org_dir")" != "llama-cache" && "$(basename "$org_dir")" != "chat_templates" && "$(basename "$org_dir")" != ".claude" ]]; then
                    local org="$(basename "$org_dir")"
                    for model_dir in "$org_dir"/*; do
                        if [[ -d "$model_dir" ]]; then
                            local model="$(basename "$model_dir")"
                            existing_models+=("$org/$model")
                        fi
                    done
                fi
            done
        fi
    fi
    
    _describe 'existing model' existing_models
}

_model_manager_model_ids() {
    # For new models, we could potentially complete common model IDs
    # For now, just provide some popular examples as suggestions
    local -a popular_models
    popular_models=(
        'microsoft/DialoGPT-medium'
        'microsoft/phi-2'
        'Qwen/Qwen2.5-Coder-7B-Instruct'
        'lmstudio-community/Meta-Llama-3.1-8B-Instruct-GGUF'
        'unsloth/llama-3-8b-bnb-4bit'
    )
    
    _describe 'model ID (org/repo format)' popular_models
    # Also allow free text input
    _message 'model ID (format: org/repo-name)'
}

_model-manager "$@"