/**
Quick setup for immediate AI agent compatibility
Run this after cloning or when setting up a new environment

This script provides a simple wrapper around the main setup-agents.rn script
for quick deployment of AI agent symlinks in the Crucible project.

Usage:
    rune run quick-setup.rn

The script will:
1. Locate the main setup-agents.rn script
2. Execute it with appropriate parameters
3. Provide user guidance for next steps
*/

use std::env;
use std::path::Path;
use std::process::Command;

fn main() {
    println!("🚀 Quick AI Agent Setup for Crucible");
    println!("=====================================");

    // Get current directory (should be dotfiles/agents/dot-agents/commands/)
    let script_dir = env::current_dir()
        .expect("Failed to get current directory");

    // Navigate to project root (should be dotfiles/agents/)
    let project_root = script_dir.parent()
        .and_then(|p| p.parent())
        .expect("Failed to determine project root");

    // Path to the main setup script
    let setup_script = project_root.join("commands").join("setup-agents.rn");

    println!("Script directory: {}", script_dir.display());
    println!("Project root: {}", project_root.display());
    println!("Setup script: {}", setup_script.display());

    if !setup_script.exists() {
        println!("❌ Setup script not found: {}", setup_script.display());
        println!("Please ensure setup-agents.rn exists in the commands directory.");
        return;
    }

    println!("");
    println!("🔧 Running main setup script...");

    // Execute the main setup script
    let output = Command::new("rune")
        .args(&["run", &setup_script.to_string_lossy()])
        .current_dir(&project_root)
        .output();

    match output {
        Ok(result) => {
            println!("{}", String::from_utf8_lossy(&result.stdout));
            if !result.stderr.is_empty() {
                eprintln!("STDERR: {}", String::from_utf8_lossy(&result.stderr));
            }

            if result.status.success() {
                println!("");
                println!("📋 Next Steps:");
                println!("1. Restart your AI agent client (Cursor, Claude, etc.)");
                println!("2. The agent should now have access to Crucible's tools and context");
                println!("3. Try asking the agent about the project structure or to help with development");
                println!("");
                println!("🔧 Manual Setup (if needed):");
                println!("  For Cursor: Restart Cursor completely");
                println!("  For Claude: Refresh the conversation or restart the app");
                println!("  For other agents: Check their documentation for config reload instructions");
                println!("");
                println!("📚 Available Tools:");
                println!("  - .agents/tools/ - Code analysis and development workflows");
                println!("  - .agents/contexts/ - Project context and guidelines");
                println!("  - .agents/workflows/ - Feature development processes");
                println!("  - .agents/config/ - Agent configurations and MCP settings");
            } else {
                eprintln!("❌ Setup script failed with exit code: {}", result.status);
            }
        }
        Err(e) => {
            eprintln!("❌ Failed to execute setup script: {}", e);
            eprintln!("Make sure 'rune' is installed and available in your PATH.");
        }
    }
}