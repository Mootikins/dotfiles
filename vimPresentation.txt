======================================================================
||/                                                                \||
||                                                                  ||
||                                                                  ||
||                                                                  ||
||                    __    __) _____ __     __)                    || 
||                   (  |  /   (  /  (  /|  /|                      || 
||                      | /      /     / | / |                      || 
||                      |/   ___/__ ) /  |/  |_                     || 
||                      |  (__ /   (_/   '                          || 
||                                                                  ||
||                                                                  ||
||                        Victory in Modes                          ||
||                                                                  ||
||                                                                  ||
||                                                                  ||
||\                   Use Ctrl-D to scroll down                    /||
======================================================================
======================================================================
-------------------------------Why Vim?-------------------------------
======================================================================

Ubiquitous - Vi, Vim's predecessor, can be found on nearly every *nix
    system.

Fast - Vi's source code was written in the 70s for much slower
    systems, so Vim is, naturally, lightweight.

Extensible - Vim's scripting language has spawned books and an
    enormous community of plugin writers. If another editor or IDE
    has something that Vim doesn't, you can probably find a plugin
    for it.

Efficient - Since Vi/Vim is controlled only with the keyboard, less
    time is spent moving your hand to your mouse. Is also more
    ergonomic than Emacs' RSI inducing key combinations.

======================================================================
-----------------------------Vim's Modes------------------------------
======================================================================

Vim has 5 modes:
    -Normal (Esc to leave any other mode)
        Single keys and serial key combinations perform actions
    -Insert (Many ways to enter, mostly i, a, and Normal's c)
        Insertion of text
    -Visual (Standard (v), Line (V) and Block (Ctrl-v))
        Highlights text that can be used by Normal mode commands
    -Command-Line (: when in normal mode)
        Allows access to more specific/advanced commands
    -Ex-mode (Advanced and not relevant)
        Similar to Command-Line, but for batch processing

======================================================================
-----------------Normal Mode, Movement, and Commands------------------
======================================================================
Movement commands:
    - h,j,k,l for left, down, up, right respectively
    - Ctrl-u, Ctrl-d to move half a page up, down
    - Ctrl-b, Ctrl-f to move a full page up, down
    - /<text>, ?<text> to search forward/backward for <text>
        - n and N move to next/previous results
    - gg, G to move to top, bottom of current file
    - 0, $ to move to beginning, end of line (^ and 
    - w and b to move to beginning of next/prev word
        - W and B are space-separated words
    - t<char> and f<char> move to/find <char> in same line
        - T and F do the same backwards
        - , and ; move to next/prev result in line

Editing commands:
    - i, a, I, A to enter Insert mode before/after current
        character/line
    - ESC or Ctrl-[ to return to Normal mode from Insert mode
    - c changes text, C changes until end of line
    - y to yank (or copy) text, yy or Y to yank current line
    - d deletes text, dd for current line (actually moves to " reg)
    - p pastes after cursor, P pastes before cursor
    - x to delete character under cursor
    - u to undo, Ctrl-r to redo
    - . to repeat last command sentence (extremely useful)
    - gf to find file under cursor and open (eg ~/dotfiles/core.vim)
    - <number>G to jump to line <number>
    - ==, >>, << to auto-indent, indent, and un-indent current line
    - : to enter Command-Line mode

Basic Command-Line commands:
    - write <directory/filename> to write the current buffer to
        the directory under the given filename
    - quit will quit the current buffer
    - edit <directory/filename> will open the given file in a new buffer
    - many more advanced commands like search and replace

For Command-Line, it is important to note that you can combine commands
and you only have to type enough characters that there are no other
possible commands (like Huffman encoding). This means wq will write the
current buffer to its already given filename and quit the buffer.

======================================================================
---------------------Understanding Vim's Language---------------------
======================================================================

Vim's commands can be run in a sentence-like structure:
    <operator><count(optional)><motion>

An operator is almost anything referenced above: c, d, p, x, >>, etc.

Count is the degree you want to be applied to the motion.

Motion is any command that moves the cursor: t, w, b, e, t/f, / and
    some others like i (inside) and a (around).

So some full command strings could be:
    yi3w (yanks text in the next 3 words)
    ci" (deletes text in pair of quotes and goes into insert mode)
    d3j (deletes current lines and two more lines down)
    "a3p (pastes the text in register a 3 times)
    cf. (change text to next period, inclusive)
    dt; (delete text to next semicolon, non-inclusive)

======================================================================
--------------------Registers, or Multi-Clipboards--------------------
======================================================================

One of Vim's most powerful features is registers, which gives you
access to over 20 "clipboards" (some of which are reserved/special).

" is used to choose which register you want to use for the following
register-based command.

Based on this, you have a register for each alphanumeric character.
You can also easily append text to a register
    "ayiw will yank the current word to register a, while
    "Ayiw will append the current word to register a

There are also some important special registers:
    * is the system clipboard, how you copy/paste between Vim and
        other programs
    . is the last inserted text (not per character, but all of the
        text entered on last time you were in Insert mode)
    % is the directory path from where Vim was opened to the current
        file
    : is the most recently executed Command-Line command
    _ is the "black hole", essentially equivalent to /dev/null.
        Anything put in is gone for good
    # is the last edited file (the last file written out)
    0 will always be the most recently yanked text
    1-9 will be the 9 most recent text deletions (larger than a line)
    - is any text deletion less than a line, eg 3x
    / is your last search term
    = a SUPER special, advanced register used for evaluating
        expressions. This one is awesome for macros

======================================================================
--------------------------------Macros--------------------------------
======================================================================
Another of Vim's coolest features is macros, though this one is more
common.

q<register> will begin recording all your keystrokes until you press q
again, then put it into <register>.

@<register> will run the macro in <register>, and @@ will execute the
last run macro.

The fact that the macros are stored in the registers means that you can 
edit them afterwards if you make any mistakes or even record macros
and save them in another file for later use.

======================================================================
-------------------(Re)Mapping Keys in Config Files-------------------
======================================================================

Vim supports custom config files that allow the mapping and remapping
of commands to any key combination that is not already used.

Vim by default puts this file in ~/.vimrc, while NeoVim puts it in
~/.config/nvim/init.vim

======================================================================
------------------------------Questions?------------------------------
======================================================================

If you ever want a refresher, just enter "vimtutor" in your terminal
to get a beginner-friendly tutorial, though it only really covers
the basics.

For more help, never be afraid to use Vim's built in help system. It
can be called by entering Command-Line mode and typing:

    h <search term>

where the search term can be almost anything you are curious about.
